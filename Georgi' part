Допустимост и оптималност

Алгоритъмът „а звезда“ е приемлив, защото преминава през по-малко върхове, спрямо всеки друг алгоритъм за търсене със същата евристика. Това е така, защото алгоритъмът използва „оптимистична“ оценка на разходите за пътя на всеки един връх, през който той счита да премине-оптимистичната оценка се състои в това, че истинският разход за пътя изминат през този връх към целта ще бъде поне толкова голямо, колкото на прогнозата. Но критично дотолкова, доколкото „а звезда“ „знае“, че оптимистичната оценка може да бъде постижима.
Тук е основната идея на доказателството:
Когато „а звезда“ завърши своето търсене, той вече е намерил път, чиито действителни разходи са по-малки от определените разходи за всеки път през всички отворени върхове. Тъй като тези прогнози са оптимистични „а звезда“ може спокойно да ги пренебрегне. С други думи „а звезда“ никога няма да пренебрегне възможността за път с по-ниски разходи, ако е допустимо.
Да предположим сега ,че друг алгоритъм за търсене Б завърши своето търсене с път, чийто действително направен разход е не по-малък от очакваните разходи за път през някой отворен връх. Въз основа на информацията, с която евристичния алгоритъм „а звезда“ има, алгоритъм Б не може да изключи възможността, че пътя през този връх е с по-нисък разход.
Това е вярно, само ако и двете твърдения са изпълнени:
•	„а звезда“ използва приемлива евристика. В противен случай не е гарантирано, че „а звезда“ ще изведе по-малко върхове спрямо някой друг алгоритъм за търсене със същата евристика.
•	„а звезда“ решава само един проблем за търсене, а не поредица от такива. В противен случай не е гарантирано, че „а звезда“ ще изведе по-малко върхове от точкови евристични алгоритми за търсене.
Граница на релаксация
Критерия за допустимост гарантира оптимален път за решение, това означава също, че „а звезда“ трябва да проучи всички еднакво приемливи пътища, за да намери оптималния сред тях. Възможно е да се ускори търсенето за сметка на оптималността чрез облекчаване на критерия за допустимост. Много често ние искаме да свържем тази релаксация, за да можем да гарантираме, че решението за път е не по-лошо от      (1 + ε) пъти от оптималното решение за път. Това твърдение е посочено като                ε- допустимо.
Има редица ε-допустими алгоритми:
•	Претеглена А*. Ако ha(n) е допустима евристична функция, в претеглената А* използва  hw(n) = ε ha(n), ε > 1 като евристична функция и изпълнява А* търсенето като обикновено ( което  в крайна сметка се случи по-бързо, отколкото използвайки  ha тъй като възникват по-малко върхове).Следователно пътят открит от алгоритъма за търсене може да коства най-много ε пъти от най-малката стойност за път през графа.
•	Статично претеглената използва стойността на функцията f(n) = g(n) + (1 + ε)h(n).
•	Динамично претеглената използва стойността на функцията f(n) = g(n) + (1 + ε w(n))h(n), където  , и d(n) е дълбочината на търсенето и N e очакваната дължина на пътя решение.
•	Изследвана динамична тежест използва представителна извадка на върхове  с по-добра оценка и включва евристична грешка.
•	   използва 2 евристични функции. Първата е FOCAL списък, който се използва, за да се изберат възможни върхове, а втората hF  се използва за да се избере най-добрия връх от FOCAL списъка.
•	Aε избира върхове с функцията  A f(n) + B hF(n), където А и B са константи. Ако не могат да бъдат избрани върхове, алгоритъмът ще спре с функцията C f(n) + D hF(n) , където С и D са константи.
•	Алфа А* се опитва да поддържа в дълбочина първото разработване от предпочитащите разширени върхове. Алфа А* използва функцията на разходите
fα(n) = (1 + wα(n)) f(n), където                                                                    и  λ  и Λ са 

константи, като λ  < Λ , π(n) е родител на n и  ñ е най-близкия разширен връх.
Комплексност
	Комплексността на времето на А* зависи от нейната евристика. В най-лошия случай на търсене на неограничено пространство, броят на разширените върхове е експоненциален в дължината на решението(най-кратък път) d: O(b^d), където b e фактор на възлите(средният брой наследници на състояние). Това предполага, че съществува цел и е достъпна от началното състояние, ако не е  и пространството на състоянието е безкрайно, алгоритъмът ще е безкраен. Комплексността на времето е полином, когато търсеното пространство е дърво, има една единствена цел на състоянието и евристичната функция h има следното условие:   , където h* е оптимална евристика, с точния разход, за да стигнете от х до целта. С други думи грешката на h няма да расте по-бързо от логаритъма на „перфектната евристика“ на h*, която връща реалното разстояние от х до целта.
Приложения
	А* обикновено се използва за търсене на път в приложения като игрите, но първоначално е бил измислен като алгоритъм за обхождане на графи. Той намира приложение за разрешаване на различни проблеми, включително и присвояването, използвайки стохастична граматика.
